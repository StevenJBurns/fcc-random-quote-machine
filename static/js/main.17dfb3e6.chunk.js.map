{"version":3,"sources":["components/AppMain.jsx","components/AppHeader.jsx","components/AppFooter.jsx","components/AppNav.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AppMain","props","getQuote","quote","react_default","a","createElement","id","author","href","onClick","AppHeader","AppFooter","AppNav","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","randomQuote","randomIbdex","getRandomQuote","bind","assertThisInitialized","e","length","i","Math","floor","random","setState","_this2","fetch","then","res","json","resJSON","toConsumableArray","q","Fragment","components_AppHeader","components_AppNav","components_AppMain","components_AppFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAkBeA,EAfC,SAACC,GAAU,IACjBC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MAElB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,YACPH,EAAAC,EAAAC,cAAA,WAASC,GAAG,aACVH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAP,IAAqBJ,EAAQA,EAAMA,MAAQ,KAA3C,KACAC,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,KAAmBJ,EAAQA,EAAMK,OAAS,MAC1CJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcE,KAAK,oCAAzB,SACAL,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYG,QAASR,GAAhC,gBCHOS,EANG,SAACV,GACjB,OACEG,EAAAC,EAAAC,cAAA,UAAQC,GAAG,gBCIAK,EANG,SAACX,GACjB,OACEG,EAAAC,EAAAC,cAAA,UAAQC,GAAG,gBCIAM,EANA,SAACZ,GACd,OACEG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aC+CGO,qBAvCb,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KAEDqB,MAAQ,CACXC,OAAQ,GACRC,YAAa,GACbC,aAAc,GAGhBV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KATLA,8EAYJc,GACb,IAAIC,EAASZ,KAAKI,MAAMC,OAAOO,OAC3BC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GACnCZ,KAAKiB,SAAS,CAAEV,YAAaM,gDAGX,IAAAK,EAAAlB,KAClBmB,MAtBc,0IAuBXC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAO,OAAIL,EAAKD,SAAS,CAAEZ,OAAOP,OAAA0B,EAAA,EAAA1B,CAAKyB,EAAO,YACnDH,KAAKpB,KAAKQ,iDAIb,IAAIiB,EAAIzB,KAAKI,MAAMC,OAAOL,KAAKI,MAAMG,aAErC,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuC,SAAP,KACExC,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAS7C,SAAUgB,KAAKQ,eAAgBvB,MAAOwC,IAC/CvC,EAAAC,EAAAC,cAAC0C,EAAD,cAlCUC,IAAMC,kBCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,eDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.17dfb3e6.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst AppMain = (props) => {\n  const { getQuote, quote } = props;\n\n  return (\n    <main id=\"app-main\">\n      <section id=\"quote-box\">\n        <h2 id=\"text\">&quot;{quote ? quote.quote : null}&quot;</h2>\n        <h4 id=\"author\">--{quote ? quote.author : null}</h4>\n        <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\">TWEET</a>\n        <button id=\"new-quote\" onClick={getQuote}>New Quote</button>\n      </section>\n    </main>\n  );\n};\n\nexport default AppMain;\n","import React from \"react\";\n\n\nconst AppHeader = (props) => {\n  return (\n    <header id=\"app-header\"></header>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\n\n\nconst AppFooter = (props) => {\n  return (\n    <footer id=\"app-footer\"></footer>\n  );\n};\n\nexport default AppFooter;\n","import React from \"react\";\n\n\nconst AppNav = (props) => {\n  return (\n    <nav id=\"app-nav\"></nav>\n  );\n};\n\nexport default AppNav;\n","import React from 'react';\n\nimport AppMain from \"./components/AppMain.jsx\";\nimport AppHeader from \"./components/AppHeader.jsx\";\nimport AppFooter from \"./components/AppFooter.jsx\";\nimport AppNav from \"./components/AppNav.jsx\";\n\nimport './styles/App.css';\n// import logo from './assets/logo.svg';\n\nconst urlQuotes = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quotes: [],\n      randomQuote: {},\n      randomIbdex: -1\n    };\n\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  };\n\n  getRandomQuote(e) {\n    let length = this.state.quotes.length;\n    let i = Math.floor(Math.random() * length);\n    this.setState({ randomIbdex: i});\n  };\n\n  componentDidMount() {\n    fetch(urlQuotes)\n      .then(res => res.json())\n      .then(resJSON => this.setState({ quotes: [...resJSON[\"quotes\"]] }))\n      .then(this.getRandomQuote);\n  };\n\n  render() {\n    let q = this.state.quotes[this.state.randomIbdex]\n\n    return (\n      <React.Fragment>\n        <AppHeader />\n        <AppNav />\n        <AppMain getQuote={this.getRandomQuote} quote={q} />\n        <AppFooter />\n      </React.Fragment>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.jsx';\n\nimport './styles/index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('react-root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}