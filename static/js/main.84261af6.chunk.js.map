{"version":3,"sources":["components/AppMain.jsx","components/AppHeader.jsx","components/AppNav.jsx","components/AppFooter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AppMain","props","getQuote","quote","scheme","react_default","a","createElement","id","style","backgroundColor","author","href","index_es","icon","faTwitterSquare","className","color","size","onClick","AppHeader","faFreeCodeCamp","AppNav","target","rel","faLinkedin","faTwitter","faGithub","faCodepen","AppFooter","components_AppNav","children","colorSchemes","dark","light","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","randomIndex","randomScheme","getRandomQuote","bind","assertThisInitialized","getRandomColorScheme","e","length","i","Math","floor","random","setState","r","_this2","fetch","then","res","json","resJSON","toConsumableArray","q","Fragment","components_AppHeader","components_AppMain","components_AppFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84261af6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitterSquare } from \"@fortawesome/free-brands-svg-icons\"\n\n\nconst AppMain = (props) => {\n  const { getQuote, quote, scheme } = props;\n\n  return (\n    <main id=\"app-main\" style={{ backgroundColor: scheme[\"dark\"] }}>\n      <section id=\"quote-box\" style={{ backgroundColor: scheme[\"light\"] }}>\n        <h2 id=\"text\">&quot;{quote ? quote.quote : null}&quot;</h2>\n        <h4 id=\"author\">-- {quote ? quote.author : null}</h4>\n        <div id=\"div-button-wrapper\">\n          <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\">\n            <FontAwesomeIcon icon={faTwitterSquare} className=\"faIcon\" color={scheme[\"dark\"]} size=\"3x\" />\n          </a>\n          <button id=\"new-quote\" style={{ backgroundColor: props.scheme[\"dark\"] }} onClick={getQuote}>New Quote</button>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default AppMain;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\"\n\n\nconst AppHeader = (props) => {\n  return (\n    <header id=\"app-header\" style={{ backgroundColor: props.scheme[\"dark\"] }}>\n      <div id=\"div-headings-wrapper\">\n        <h2>Random Quotes</h2>\n        <h4>built for Free Code Camp</h4>  \n      </div>\n      <FontAwesomeIcon icon={ faFreeCodeCamp } className=\"faIcon\" color=\"#F0F0F0\" size=\"4x\" />\n    </header>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faTwitter,faGithub, faCodepen } from \"@fortawesome/free-brands-svg-icons\"\n\n\nconst AppNav = (props) => {\n  return (\n    <nav id=\"app-nav\">\n      <ul>\n        <li>\n          <a href=\"https://www.linkedin.com/in/steven-j-burns/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={ faLinkedin } size=\"2x\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://twitter.com/StevenJBurns\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={ faTwitter } size=\"2x\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://github.com/StevenJBurns\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={ faGithub } size=\"2x\" />\n          </a>\n        </li>\n        <li>\n          <a href=\"https://codepen.io/StevenJBurns/#\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={ faCodepen } size=\"2x\" />\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default AppNav;\n","import React from \"react\";\nimport AppNav from \"./AppNav\";\n\n\nconst AppFooter = (props) => {\n  return (\n    <footer id=\"app-footer\" style={{ backgroundColor: props.scheme[\"dark\"] }}>\n      <AppNav />\n      <h6>&copy; 2018 &bull; Steven J Burns</h6>\n      {props.children}\n    </footer>\n  );\n};\n\nexport default AppFooter;\n","import React from 'react';\n\nimport AppMain from \"./components/AppMain.jsx\";\nimport AppHeader from \"./components/AppHeader.jsx\";\nimport AppFooter from \"./components/AppFooter.jsx\";\n\nimport './styles/App.css';\n// import logo from './assets/logo.svg';\n\n\nconst urlQuotes = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nconst colorSchemes = [\n  /* red */     { dark: \"#b71c1c\", light: \"#ffcdd2\" },\n  /* blue */    { dark: \"#0d47a1\", light: \"#bbdefb\" },\n  /* purple */  { dark: \"#311b92\", light: \"#d1c4e9\" },\n  /* orange */  { dark: \"#bf360c\", light: \"#ffccbc\" },\n  /* green */   { dark: \"#1b5e20\", light: \"#c8e6c9\" },\n  /* brown */   { dark: \"#3e2723\", light: \"#d7ccc8\" },\n  /* gold */    { dark: \"#ffab00\", light: \"#fff9c4\" },\n  /* grey */    { dark: \"#424242\", light: \"#e0e0e0\" }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quotes: [],\n      randomIndex: -1,\n      randomScheme: 0\n    };\n\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n    this.getRandomColorScheme = this.getRandomColorScheme.bind(this);\n  };\n\n  getRandomQuote(e) {\n    let length = this.state.quotes.length;\n    let i = Math.floor(Math.random() * length);\n\n    i === this.state.randomIndex ? this.getRandomQuote(e) : this.setState({ randomIndex: i});\n\n    this.getRandomColorScheme();\n  };\n\n  getRandomColorScheme() {\n    let r = Math.floor(Math.random() * colorSchemes.length);\n\n    r === this.state.randomScheme ? this.getRandomColorScheme() : this.setState({ randomScheme: r });\n\n    // this.setState({ randomScheme: r})\n  }\n\n  componentDidMount() {\n    fetch(urlQuotes)\n      .then(res => res.json())\n      .then(resJSON => this.setState({ quotes: [...resJSON[\"quotes\"]] }))\n      .then(this.getRandomQuote)\n      .then(this.getRandomColorScheme);\n  };\n\n  render() {\n    let q = this.state.quotes[this.state.randomIndex]\n\n    return (\n      <React.Fragment>\n        <AppHeader scheme={colorSchemes[this.state.randomScheme]} />\n        <AppMain getQuote={this.getRandomQuote} quote={q} scheme={colorSchemes[this.state.randomScheme]} />\n        <AppFooter scheme={colorSchemes[this.state.randomScheme]} />\n      </React.Fragment>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.jsx';\n\nimport './styles/index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('react-root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}